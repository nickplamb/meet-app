{"version":3,"sources":["components/Event.jsx","api.js","components/EventList.jsx","components/CitySearch.jsx","components/NumberOfEvents.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showDetails","handleDetailsToggle","setState","prevState","event","this","props","eventDateTime","Date","start","dateTime","toLocaleString","weekday","month","day","year","timeZoneName","extractDateTime","basicDetails","summary","location","className","href","htmlLink","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","e","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","numberOfEvents","handleNumberChange","htmlFor","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76a0d1ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { extractDateTime } from '../api';\n\nexport default class Event extends Component {\n  state = {\n    showDetails: false,\n  }\n\n  handleDetailsToggle = () => {\n    this.setState(prevState => ({\n      showDetails: !prevState.showDetails\n    }));\n  }\n\n  render() {\n    const { event } = this.props;\n    const { showDetails } = this.state;\n    \n    const eventDateTime = extractDateTime(event);\n    const basicDetails = `${eventDateTime} @${event.summary} | ${event.location}`;\n    \n    return (\n      <div className=\"event\">\n        <h3 className=\"event-title\">\n          { event.summary }\n        </h3>\n        <div className=\"basic-details\">\n          { basicDetails }\n        </div>\n        { \n          showDetails && \n          <div className=\"more-details\">\n            <p><b>About event:</b></p>\n            <a className=\"event-link\" href={ event.htmlLink }>See details on Google Calendar</a>\n            <p className=\"event-description\">{ event.description }</p>\n          </div>\n        }\n        <button \n          className=\"show-details-btn\"\n          onClick={() => this.handleDetailsToggle()}\n        >\n          { showDetails ? 'Hide Details' : 'Show Details' }\n        </button>\n      </div>\n    )\n  }\n}","/**\n * \n * @param {*} events:\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\n\nexport const extractLocations = events => {\n  let extractLocations = events.map(event => event.location);\n  let locations = [...new Set(extractLocations)];\n  return locations;\n};\n\n\n/**\n * \n * @param {*} event \n * @returns eventDate Time\n * This function will take a single event from the google calaendar api and convert the start time to a human readable format.\n */\nexport const extractDateTime = event => {\n  const dateTimeOptions = { weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', timeZoneName: 'long' };\n  const eventDateTime = new Date(event.start.dateTime).toLocaleString([], dateTimeOptions);\n  return eventDateTime;\n};","import React from 'react'\n\nimport Event from './Event'\n\nexport default function EventList({ events }) {\n  return (\n    <ul className=\"EventList\">\n      {events.map(event => \n        <li key={ event.id }>\n          <Event event={ event } />\n        </li>\n      )}\n    </ul>\n  )\n}","import React, { Component } from 'react'\n\nexport default class CitySearch extends Component {\n  state = {\n    query: '',\n    suggestions: [],\n  }\n\n  handleInputChanged = e => {\n    const value = e.target.value;\n    const suggestions = this.props.locations.filter(location => {\n      return location.toUpperCase().indexOf(value.toUpperCase())> -1;\n    });\n    this.setState({ \n      query: value,\n      suggestions,\n    });\n  }\n\n  handleItemClicked = suggestion => {\n    this.setState({ query: suggestion })\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input \n          type=\"text\"\n          className=\"city\"\n          value={ this.state.query }\n          onChange={ this.handleInputChanged }\n        />\n        <ul className=\"suggestions\" >\n          {this.state.suggestions.map(suggestion => (\n            <li \n              key={ suggestion }\n              onClick={ () => this.handleItemClicked(suggestion) }\n            >{ suggestion }</li>\n          ))}\n          <li key=\"all\">\n            <b>See all cities</b>\n          </li>\n        </ul>\n  \n      </div>\n    );\n  }\n}","import React, { Component } from 'react'\n\nclass NumberOfEvents extends Component {\n  state = {\n    numberOfEvents: 32,\n  };\n\n  handleNumberChange = e => {\n    const value = e.target.value;\n    this.setState({\n      numberOfEvents: value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"number-of-events\">\n        <label htmlFor=\"number-of-events__input\" >Number of events:</label>\n        <input \n          type=\"number\"\n          id=\"number-of-events__input\"\n          className=\"number-of-events__input\" \n          onChange={e => this.handleNumberChange(e)}\n        />\n      </div>\n    )\n  }\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport EventList from './components/EventList';\nimport CitySearch from './components/CitySearch';\nimport NumberOfEvents from './components/NumberOfEvents';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <CitySearch />\n       <NumberOfEvents />\n       <EventList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}